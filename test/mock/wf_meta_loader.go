/* 
*Copyright (c) 2019-2021, Alibaba Group Holding Limited;
*Licensed under the Apache License, Version 2.0 (the "License");
*you may not use this file except in compliance with the License.
*You may obtain a copy of the License at

*   http://www.apache.org/licenses/LICENSE-2.0

*Unless required by applicable law or agreed to in writing, software
*distributed under the License is distributed on an "AS IS" BASIS,
*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*See the License for the specific language governing permissions and
*limitations under the License.
 */


// Code generated by MockGen. DO NOT EDIT.
// Source: ./wfengine/wf_meta_loader.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	wfengine "gitlab.alibaba-inc.com/polar-as/polar-wf-engine/wfengine"
)

// MockWfMetaLoader is a mock of WfMetaLoader interface.
type MockWfMetaLoader struct {
	ctrl     *gomock.Controller
	recorder *MockWfMetaLoaderMockRecorder
}

// MockWfMetaLoaderMockRecorder is the mock recorder for MockWfMetaLoader.
type MockWfMetaLoaderMockRecorder struct {
	mock *MockWfMetaLoader
}

// NewMockWfMetaLoader creates a new mock instance.
func NewMockWfMetaLoader(ctrl *gomock.Controller) *MockWfMetaLoader {
	mock := &MockWfMetaLoader{ctrl: ctrl}
	mock.recorder = &MockWfMetaLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWfMetaLoader) EXPECT() *MockWfMetaLoaderMockRecorder {
	return m.recorder
}

// GetAllFlowMeta mocks base method.
func (m *MockWfMetaLoader) GetAllFlowMeta(workFlowMetaDir string) (map[string]*wfengine.FlowMeta, map[string]*wfengine.StepGroupMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFlowMeta", workFlowMetaDir)
	ret0, _ := ret[0].(map[string]*wfengine.FlowMeta)
	ret1, _ := ret[1].(map[string]*wfengine.StepGroupMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllFlowMeta indicates an expected call of GetAllFlowMeta.
func (mr *MockWfMetaLoaderMockRecorder) GetAllFlowMeta(workFlowMetaDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFlowMeta", reflect.TypeOf((*MockWfMetaLoader)(nil).GetAllFlowMeta), workFlowMetaDir)
}
