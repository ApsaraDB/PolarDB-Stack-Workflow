/* 
*Copyright (c) 2019-2021, Alibaba Group Holding Limited;
*Licensed under the Apache License, Version 2.0 (the "License");
*you may not use this file except in compliance with the License.
*You may obtain a copy of the License at

*   http://www.apache.org/licenses/LICENSE-2.0

*Unless required by applicable law or agreed to in writing, software
*distributed under the License is distributed on an "AS IS" BASIS,
*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*See the License for the specific language governing permissions and
*limitations under the License.
 */


// Code generated by MockGen. DO NOT EDIT.
// Source: ./wfengine/wf_step_action.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
)

// MockStepAction is a mock of StepAction interface.
type MockStepAction struct {
	ctrl     *gomock.Controller
	recorder *MockStepActionMockRecorder
}

// MockStepActionMockRecorder is the mock recorder for MockStepAction.
type MockStepActionMockRecorder struct {
	mock *MockStepAction
}

// NewMockStepAction creates a new mock instance.
func NewMockStepAction(ctrl *gomock.Controller) *MockStepAction {
	mock := &MockStepAction{ctrl: ctrl}
	mock.recorder = &MockStepActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStepAction) EXPECT() *MockStepActionMockRecorder {
	return m.recorder
}

// DoStep mocks base method.
func (m *MockStepAction) DoStep(arg0 context.Context, arg1 logr.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoStep", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoStep indicates an expected call of DoStep.
func (mr *MockStepActionMockRecorder) DoStep(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoStep", reflect.TypeOf((*MockStepAction)(nil).DoStep), arg0, arg1)
}

// Init mocks base method.
func (m *MockStepAction) Init(arg0 map[string]interface{}, arg1 logr.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockStepActionMockRecorder) Init(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockStepAction)(nil).Init), arg0, arg1)
}

// Output mocks base method.
func (m *MockStepAction) Output(arg0 logr.Logger) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Output", arg0)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Output indicates an expected call of Output.
func (mr *MockStepActionMockRecorder) Output(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockStepAction)(nil).Output), arg0)
}
